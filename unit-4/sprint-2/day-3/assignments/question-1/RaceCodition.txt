Race-Condition--> A race-condition is a condition in which the critical section (a part of the program where shared memory is accessed)
is concurrently executed by two or more threads. It leads to incorrect behavior of a program.

A race condition can be defined as, a condition in which two or more threads compete together to
get certain shared resources.


Example- 

public class Race {
}
class Counter implements Runnable
{
private int c = 0;
public void increment()
{
try
{
Thread.sleep(10);
}
catch (InterruptedException e)
{
//Auto-generated catch block
e.printStackTrace();
}
c++;
}
public void decrement()
{
c--;
}
public int getValue()
{
return c;
}
@Override
public void run()
{
//incrementing
this.increment();
System.out.println("Value for Thread After increment " + Thread.currentThread().getName() + " " + this.getVa lue());
//decrementing
this.decrement();
System.out.println("Value for Thread at last " + Thread.currentThread().getName() + " " + this.getValue()); }
}


class RaceConditionDemo
{
public static void main(String args[])
{
Counter counter = new Counter();
Thread t1 = new Thread(counter, "Thread-1");
Thread t2 = new Thread(counter, "Thread-2");
Thread t3 = new Thread(counter, "Thread-3");
t1.start();
t2.start();
t3.start();
}
}
//Overcoming Race condition
package week4.day3;
public class Race {
}



class Counter implements Runnable
{
private int c = 0;
public void increment()
{
try
{
Thread.sleep(10);
}
catch (InterruptedException e)
{
//Auto-generated catch block
e.printStackTrace();
}
c++;
}
public void decrement()
{
c--;
}
public int getValue()
{
return c;
}
@Override
public void run()
{
synchronized (this)
{
//incrementing
this.increment();
System.out.println("Value for Thread After increment " + Thread.currentThread().getName() + " " + this.g etValue());
//decrementing
this.decrement();
System.out.println("Value for Thread at last " + Thread.currentThread().getName() + " " + this.getValue
());
}
}
}




class RaceConditionDemo
{
public static void main(String args[])
{
Counter counter = new Counter();
Thread t1 = new Thread(counter, "Thread-1");
Thread t2 = new Thread(counter, "Thread-2");
Thread t3 = new Thread(counter, "Thread-3");
t1.start();
t2.start();
t3.start();
}
}

